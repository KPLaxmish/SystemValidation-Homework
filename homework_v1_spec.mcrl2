sort 
  Sluice = struct S1|S2; %The two sluices in the system
  DoorType = struct Inside|Outside; %the Placement of the doors
  Position = struct IR|WR_I|WR_O|OR|IPS|S1_Out|S1_In|S2_Out|S2_In;% The various positions that a wafer can occupy
  Wafer = struct Empty | Projected | Unprojected;% The type of wafer at the above positions

map 
  SluiceMap : Sluice # DoorType -> Position;

var
  p:Position;
  src,des:Position;

eqn
  % The mapping from a sluice and the door type to its corresponding position in the system 
  SluiceMap(S1,Outside)=S1_Out;
  SluiceMap(S1,Inside)=S1_In;
  SluiceMap(S2,Outside)=S2_Out;
  SluiceMap(S2,Inside)=S2_In;

act  
  	% Signals to sluices to check if they can be opened/closed or not.
	checkOpenReceived, checkOpenSent, checkOpen,checkCloseReceived, checkCloseSent, checkClose: Position; 
	% Sluice reponses regarding the status of its doors (inside and outside)
	sluiceOpenSent, sluiceOpenReceived, sluiceOpenSignal: Bool # Position;
	sluiceClosedSent, sluiceClosedReceived, sluiceClosedSignal: Bool # Position;
	SluiceOpen,SluiceClose,signalDoorStuck: Sluice # DoorType;
 	% Pumping the air out of a sluice
	pump:Sluice; 
	% Request to move sent by the robots to the controller.
	MoveReqSent, MoveReqReceived, MoveReq: Position # Position; 
	% Response sent by controller to the robots' move request, true means approved, false means denied.
	MoveResponseSent, MoveResponseReceived, MoveResponse: Bool # Position # Position; 
	% Signal from the robots to the controller that they have moved to the destination.
	MoveDoneSent, MoveDoneReceived, MoveDone: Bool # Position # Position; 
  	% Updates to the wafer tracker about the changes in the wafer positions and status.
    waferStatusUpdateSent, waferStatusUpdateReceived, waferStatusUpdate: Position # Wafer; 
	% Updates to the robots and the controller about the changes in the wafer positions and status.
    waferBroadcastSent, waferBroadcastReceived, waferBroadcast: Position # Wafer; 
	% Request sent by the controller to the wafer tracker seeking the status of a wafer in the current position.
	controllerWaferRequestSent, controllerWaferRequestReceived, controllerWaferRequest: Position;
	% Response sent by the wafer tracker to the controller about the status of a wafer in the current position.
	controllerWaferResponseSent, controllerWaferResponseReceived, controllerWaferResponse: Position # Wafer;
	% Actions at the Image Projection System
	beginProjection,endProjection,projectionUpdateSent,projectionUpdateReceived,projectionUpdate,asd;

	registerEmpty, emptyOutputRack;

proc 

% S1 and S2 sequence : An outside door can be opened only if it was previously closed and the inside door is currently not open.
% An inside door can be opened only if it was previously closed and the outside door is currently not open.
% There is a pumping of air in sluice before an inside door opening.
% A sluice door can be closed if it was previously opened and it is not stuck.
						
Sluice(s:Sluice, outsideDoor:Bool, insideDoor:Bool, outsideDoorStuck:Bool, insideDoorStuck:Bool) = 
(
 %(!outsideDoorStuck&&!insideDoorStuck) ->
    ((!outsideDoor && !insideDoor) -> 
		((checkOpenReceived(SluiceMap(s,Outside)).SluiceOpen(s,Outside).sluiceOpenSent(true,SluiceMap(s,Outside)).Sluice(outsideDoor=true)) + 
  		 (checkOpenReceived(SluiceMap(s,Inside)).pump(s).SluiceOpen(s,Inside).sluiceOpenSent(true, SluiceMap(s,Inside)).Sluice(insideDoor=true)))
    )
  +
    ((outsideDoor && !insideDoor) -> 
		 checkCloseReceived(SluiceMap(s,Outside)).SluiceClose(s,Outside).sluiceClosedSent(true,SluiceMap(s,Outside)).Sluice(outsideDoor=false))
+
    ((!outsideDoor && insideDoor) -> 
		checkCloseReceived(SluiceMap(s,Inside)).SluiceClose(s,Inside).sluiceClosedSent(true,SluiceMap(s,Inside)).Sluice(insideDoor=false))  
+
    checkOpenReceived(SluiceMap(s,Outside)).(signalDoorStuck(s,Outside).(sluiceOpenSent(false, SluiceMap(s,Outside))+sluiceClosedSent(false, SluiceMap(s,Outside))). Sluice(outsideDoorStuck=true))
+
    checkOpenReceived(SluiceMap(s,Inside)).(signalDoorStuck(s,Inside).(sluiceOpenSent(false, SluiceMap(s,Inside))+ sluiceClosedSent(false, SluiceMap(s,Inside))). Sluice(insideDoorStuck=true)));				

% R1 can pickup wafers only from positions IR,S1_Out or S2_Out and place wafers only at positions S1_Out,S2_Out or OR
% R2 can pickup wafers only from positions S1_In,S2_In,WR_I,WR_O and place wafers only at positions S1_In,S2_In,WR_I
% The movemements can happen only when there is a wafer of the appropriate status at the current position and only if the controller has given the permission to move
   
Robot1 = (sum s:Sluice. ((waferBroadcastReceived(SluiceMap(s,Inside),Projected).sluiceClosedReceived(true,SluiceMap(s,Inside)).MoveReqSent(SluiceMap(s,Outside),OR).
						   	   ((MoveResponseReceived(true,SluiceMap(s,Outside),OR).waferStatusUpdateSent(SluiceMap(s,Outside), Empty).waferStatusUpdateSent(OR,Projected).MoveDoneSent(true,SluiceMap(s,Outside),OR).checkCloseSent(SluiceMap(s,Outside)))
								 + 	
						   	    (MoveResponseReceived(false, SluiceMap(s,Outside), OR).MoveDoneSent(false, SluiceMap(s,Outside),OR)))) 
						    +
			            (waferBroadcastReceived(IR,Unprojected).(sum s:Sluice.sum s':Sluice.(s!=s')->(MoveReqSent(IR,SluiceMap(s,Outside)).
                           	   ((MoveResponseReceived(true,IR,SluiceMap(s,Outside)).waferStatusUpdateSent(IR, Empty).waferStatusUpdateSent(SluiceMap(s,Outside),Unprojected).MoveDoneSent(true,IR,SluiceMap(s,Outside)).checkCloseSent(SluiceMap(s,Outside)).Robot1)
								+ 
								(MoveResponseReceived(false, IR, SluiceMap(s,Outside)).MoveReqSent(IR,SluiceMap(s',Outside)).MoveResponseReceived(true, IR, SluiceMap(s', Outside)).Robot1))))
						)));

Robot2  = (sum s:Sluice.((waferBroadcastReceived(SluiceMap(s,Outside),Unprojected).sluiceClosedReceived(true,SluiceMap(s,Outside)). MoveReqSent(SluiceMap(s,Inside),WR_I).((MoveResponseReceived(true,SluiceMap(s,Inside),WR_I).waferStatusUpdateSent(SluiceMap(s, Inside), Empty).waferStatusUpdateSent(WR_I,Unprojected).MoveDoneSent(true,SluiceMap(s,Inside),WR_I).checkCloseSent(SluiceMap(s,Inside)))
								 + 	
						   	    (MoveResponseReceived(false, SluiceMap(s,Inside),WR_I).MoveDoneSent(false, SluiceMap(s,Inside),WR_I))))
							+ 
						 (waferBroadcastReceived(WR_O,Projected).(sum s:Sluice.MoveReqSent(WR_O,SluiceMap(s,Inside)).
							   ((MoveResponseReceived(true,WR_O,SluiceMap(s,Inside)).waferStatusUpdateSent(WR_O, Empty).waferStatusUpdateSent(SluiceMap(s,Inside),Projected).
								 	MoveDoneSent(true, WR_O,SluiceMap(s,Inside)).checkCloseSent(SluiceMap(s,Inside)))
								+ 
								(MoveResponseReceived(false,WR_O,SluiceMap(s,Inside)).MoveDoneSent(false,WR_O,SluiceMap(s,Inside)))))
						 ))).Robot2;

% R3 can pickup wafers only from position WR_I and place wafers only at position IPS.
% The movemements can happen only when there is an unprojected wafer at the WR_I or when there is a projected wafer at IPS.

Robot3  = sum s:Sluice.((waferBroadcastReceived(WR_I,Unprojected).sluiceClosedReceived(true,SluiceMap(s,Inside)).MoveReqSent(WR_I,IPS).MoveResponseReceived(true,WR_I,IPS).
			 	waferStatusUpdateSent(WR_I, Empty).waferStatusUpdateSent(IPS,Unprojected).MoveDoneSent(true, WR_I,IPS)
			+ 
		  (waferBroadcastReceived(IPS,Projected).MoveReqSent(IPS,WR_O).MoveResponseReceived(true,IPS,WR_O).
				waferStatusUpdateSent(IPS, Empty).waferStatusUpdateSent(WR_O,Projected).MoveDoneSent(true, IPS,WR_O)))).Robot3;

% The image projection system begins its operations when an unprojected wafer is received. It then performs the image projection and updates the controller about the same.
ImageProjectionSystem = (waferBroadcastReceived(IPS,Unprojected).beginProjection.endProjection.projectionUpdate.waferStatusUpdateSent(IPS, Projected)).ImageProjectionSystem; 

% A wafer position tracker keeps record of the movement of the wafer in the system. Everytime a wafer status update is received from a particular position in the system, the wafer tracker updates itself. If the status of the wafer is "Empty", that means that the position is now empty and has no wafer. In this case, the wafer position tracker registers this. If the wafer status is Unprojected or Projected, the wafer tracker sends a message about this with the corresponding position, so that the robots or the IPS can react to this. The wafer information is also passed on to the controller to direct the wafer movements in and out of the system accurately.

WaferPositionTracker(start: Bool, IRw: Wafer, ORw: Wafer, S1w: Wafer, S2w: Wafer, WRIw: Wafer, WROw: Wafer, IPSw: Wafer) = 
		((start) -> 
			(waferBroadcastSent(IR, Unprojected).WaferPositionTracker(start = false, IRw = Unprojected))
			<>
		(sum p: Position, w: Wafer.waferStatusUpdateReceived(p,w).(
			(w == Empty) ->
				(((p == IR) ->
					registerEmpty.WaferPositionTracker(IRw = w))
				+
				((p == OR) ->
					registerEmpty.waferBroadcastSent(p,w).WaferPositionTracker(ORw = w))
				+
				((p == S1_In || p == S1_Out) ->
					registerEmpty.WaferPositionTracker(S1w = w))
				+
				((p == S2_In || p == S2_Out) ->
					registerEmpty.WaferPositionTracker(S2w = w))
				+
				((p == WR_I) ->
					registerEmpty.WaferPositionTracker(WRIw = w))
				+
				((p == WR_O) ->
					registerEmpty.WaferPositionTracker(WROw = w))
				+
				((p == IPS) ->
					registerEmpty.WaferPositionTracker(IPSw = w)))
			<>(
				((p == IR) ->
					waferBroadcastSent(p,w).WaferPositionTracker(IRw = w))
				+
				((p == OR) ->
					waferBroadcastSent(p,w).WaferPositionTracker(ORw = w))
				+
				((p == S1_In || p == S1_Out) ->
					waferBroadcastSent(p,w).WaferPositionTracker(S1w = w))
				+
				((p == S2_In || p == S2_Out) ->
					waferBroadcastSent(p,w).WaferPositionTracker(S2w = w))
				+
				((p == WR_I) ->
					waferBroadcastSent(p,w).WaferPositionTracker(WRIw = w))
				+
				((p == WR_O) ->
					waferBroadcastSent(p,w).WaferPositionTracker(WROw = w))
				+
				((p == IPS) ->
					waferBroadcastSent(p,w).WaferPositionTracker(IPSw = w))
				)
			
		))

		+ (sum p:Position.controllerWaferRequestReceived(p).(
			((p == IR) ->
					controllerWaferResponseSent(p,IRw).WaferPositionTracker())
				+
				((p == OR) ->
					controllerWaferResponseSent(p,ORw).WaferPositionTracker())
				+
				((p == S1_In || p == S1_Out) ->
					controllerWaferResponseSent(p,S1w).WaferPositionTracker())
				+
				((p == S2_In || p == S2_Out) ->
					controllerWaferResponseSent(p,S2w).WaferPositionTracker())
				+
				((p == WR_I) ->
					controllerWaferResponseSent(p,WRIw).WaferPositionTracker())
				+
				((p == WR_O) ->
					controllerWaferResponseSent(p,WROw).WaferPositionTracker())
				+
				((p == IPS) ->
					controllerWaferResponseSent(p,IPSw).WaferPositionTracker())
		))%;
			

		

); 

% The controller communicates sluices and rack positions whether robot movement requests can be allowed.
% It tracks the robot movements and ensures sluice doors are appropriately closed after a movement. 
% It keeps track of the wafer movements and their statuses to ensure that wafers go in the right direction (unprojected wafers move towards the IPS, projected wafers move away from the IPS)

Controller = (sum src, des: Position.
	(
		(% Start of the entire process, when a move request is sent from IR to outside of Sluice
			  ((src==IR)&&(des==S1_Out||des==S2_Out))->
			   		(MoveReqReceived(src, des).controllerWaferRequestSent(src).controllerWaferResponseReceived(src,Unprojected).controllerWaferRequestSent(des).(controllerWaferResponseReceived(des,Empty).checkOpenSent(des).
							(sluiceOpenReceived(false, des). MoveResponseSent(false, src, des) 
							+ 				
							sluiceOpenReceived(true,des).MoveResponseSent(true, src, des).MoveDoneReceived(true, src,des))
							+ (controllerWaferResponseReceived(des, Unprojected)+controllerWaferResponseReceived(des, Projected)).MoveResponseSent(false, src, des).MoveDoneReceived(false, src, des))).Controller)

	    + % When source is the WR_I, the detination has to be the IPS provided it is not occupied with projection.
		 	  (((src==WR_I)->MoveReqReceived(src, des). controllerWaferRequestSent(src). controllerWaferResponseReceived(src,Unprojected). controllerWaferRequestSent(des).(controllerWaferResponseReceived(des, Empty).MoveResponseSent(true, src, des).MoveDoneReceived(true, src,des)
							+ (controllerWaferResponseReceived(des, Unprojected) + controllerWaferResponseReceived(des, Projected).MoveResponseSent(false, src, des).MoveDoneReceived(false, src, des)))).Controller)
			
		+
		(% When the destination is inside doors the possible sources are outside doors with Unprojected wafer or WR_O with projected wafer
			 ((des == S1_In||des==S2_In) -> 
					((src==S1_Out||src==S2_Out)->
						(controllerWaferResponseReceived(src,Unprojected).checkOpenSent(des).
							(sluiceOpenReceived(false,des).MoveResponseSent(false, src, des) 
							+ 
							sluiceOpenReceived(true,des). MoveResponseSent(true, src, des). MoveDoneReceived(true, src, des))).Controller
					
				 
			     <> (src == WR_O)-> 
						(MoveReqReceived(src, des).controllerWaferRequestSent(src).controllerWaferResponseReceived(src,Projected).controllerWaferRequestSent(des).(controllerWaferResponseReceived(des, Empty).checkOpenSent(des).
							(sluiceOpenReceived(false,des).MoveResponseSent(false, src, des).MoveDoneReceived(false, src, des) 
							+ 
							sluiceOpenReceived(true, des). MoveResponseSent(true, src, des). MoveDoneReceived(true, src, des))
							+ (controllerWaferResponseReceived(des, Unprojected) + controllerWaferResponseReceived(des, Projected)).MoveResponseSent(false, src, des).MoveDoneReceived(false, src, des))).Controller
			   
	   )))		
        +
		(% When the source is inside doors the possible destinations are outside doors(src has Projected wafers) or WR_I (source has unprojected wafer)
			 ((src == S1_In || src == S2_In) -> 
					((des == WR_I)-> (MoveReqReceived(src, des).controllerWaferRequestSent(src).controllerWaferResponseReceived(src,Unprojected). controllerWaferRequestSent(des).(controllerWaferResponseReceived(des, Empty).checkOpenSent(src).
							(sluiceOpenReceived(false,src).MoveResponseSent(false, src, des).MoveDoneReceived(false, src, des) 
							+ 
							sluiceOpenReceived(true,src). MoveResponseSent(true, src, des).MoveDoneReceived(true, src, des))
							+ (controllerWaferResponseReceived(des, Unprojected) + controllerWaferResponseReceived(des, Projected)).MoveResponseSent(false, src, des).MoveDoneReceived(false, src, des))).Controller 
                  
				 <> (des == S1_Out||des==S2_Out) -> 
						(controllerWaferResponseReceived(src,Projected).checkOpenSent(src).
							(sluiceOpenReceived(false, src).MoveResponseSent(false, src, des).MoveDoneReceived(false, src, des) 
							+ 
							sluiceOpenReceived(true,src).MoveResponseSent(true, src, des). MoveDoneReceived(true, src, des))).Controller
			
        )))

	    + % When the source IPS, wait for projection updates before further movements.
			((src==IPS) -> MoveReqReceived(src, des).controllerWaferRequestSent(src).controllerWaferResponseReceived(src, Projected).controllerWaferRequestSent(des).
			(controllerWaferResponseReceived(des, Empty).MoveResponseSent(true, src, des).MoveDoneReceived(true, src, des)
			+ (controllerWaferResponseReceived(des, Unprojected) + controllerWaferResponseReceived(des, Projected)).MoveResponseSent(false, src, des).MoveDoneReceived(false, src, des)).Controller)

		+ % When the destination is OR, a projected wafer is being moved out of the system.Also check if a new wafer is available for the next cycle.
			((des==OR) -> 
				MoveReqReceived(src, des).controllerWaferRequestSent(src).(controllerWaferResponseReceived(src,Projected).checkOpenSent(src).
					(sluiceOpenReceived(false,src). MoveResponseSent(false,src,des).MoveDoneReceived(false,src,des)
					 + 
					(sluiceOpenReceived(true,src).MoveResponseSent(true, src, des).MoveDoneReceived(true,src,des)))).Controller)
		 )
       );
  

	OutputRack = waferBroadcastReceived(OR, Projected).emptyOutputRack.waferStatusUpdateSent(OR, Empty).OutputRack;

	InputRack = waferBroadcastReceived(OR, Empty).waferStatusUpdateSent(IR, Unprojected).InputRack;
 
init 

  	allow ({pump,asd,signalDoorStuck,
			checkOpen,checkClose,
			SluiceOpen,SluiceClose,sluiceOpenSignal,sluiceClosedSignal,
			waferBroadcast,waferStatusUpdate,
			MoveReq,MoveResponse,MoveDone,
			controllerWaferRequest,controllerWaferResponse,	
			beginProjection,endProjection,projectionUpdate,
			registerEmpty, emptyOutputRack
		  },

    comm  ({ 
			MoveReqSent | MoveReqReceived -> MoveReq,
			MoveResponseSent | MoveResponseReceived -> MoveResponse,
			MoveDoneSent | MoveDoneReceived -> MoveDone,
			sluiceOpenSent | sluiceOpenReceived -> sluiceOpenSignal,
			sluiceClosedSent | sluiceClosedReceived -> sluiceClosedSignal,
			checkOpenSent | checkOpenReceived -> checkOpen,
			checkCloseSent | checkCloseReceived -> checkClose,
			waferStatusUpdateSent | waferStatusUpdateReceived -> waferStatusUpdate,
			waferBroadcastSent | waferBroadcastReceived -> waferBroadcast,
			controllerWaferRequestSent | controllerWaferRequestReceived -> controllerWaferRequest,
			controllerWaferResponseSent | controllerWaferResponseReceived -> controllerWaferResponse
  
      },
       
      		Robot1 || Robot2 ||Robot3|| ImageProjectionSystem||Sluice(S1,false,false,false,false)||Sluice(S2,false,false,false,false)||Controller||    
	 	    WaferPositionTracker(true, Empty, Empty, Empty, Empty, Empty, Empty, Empty) || OutputRack || InputRack
      	 ));
